#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Merge Split Transcripts for WER Calculation
==========================================

This script merges transcriptions from split audio segments back into
complete transcripts for proper WER calculation. It uses the metadata
generated by the long audio splitter to reconstruct the original file
structure.

Usage:
    python3 merge_split_transcripts.py --input_dir /path/to/split/transcripts --output_dir /path/to/merged --metadata_dir /path/to/metadata
"""

import os
import json
import argparse
from pathlib import Path
from typing import Dict, List
from collections import defaultdict
import shutil

def load_metadata(metadata_dir: str) -> Dict:
    """
    Load all metadata files from the metadata directory
    
    Args:
        metadata_dir: Directory containing metadata files
        
    Returns:
        Dictionary mapping original filenames to their metadata
    """
    metadata = {}
    
    for metadata_file in Path(metadata_dir).glob("*/_metadata.json"):
        try:
            with open(metadata_file, 'r', encoding='utf-8') as f:
                file_metadata = json.load(f)
                original_file = file_metadata['original_file']
                metadata[original_file] = file_metadata
        except Exception as e:
            print(f"Error loading metadata from {metadata_file}: {e}")
    
    return metadata

def find_transcript_files(transcript_dir: str, model_prefixes: List[str]) -> Dict:
    """
    Find all transcript files organized by model and original file
    
    Args:
        transcript_dir: Directory containing transcript files
        model_prefixes: List of model prefixes to look for
        
    Returns:
        Dictionary mapping (model, original_file) to list of transcript files
    """
    transcripts = defaultdict(list)
    
    for transcript_file in Path(transcript_dir).glob("*.txt"):
        filename = transcript_file.name
        
        # Check if this is a transcript from a split segment
        for model_prefix in model_prefixes:
            if filename.startswith(f"{model_prefix}_") and "_segment_" in filename:
                # Extract original file name and segment info
                # Format: model_originalfile_segment_XXX.txt
                parts = filename.replace(f"{model_prefix}_", "").replace(".txt", "").split("_segment_")
                if len(parts) == 2:
                    original_file = parts[0]
                    segment_num = int(parts[1])
                    
                    transcripts[(model_prefix, original_file)].append((segment_num, str(transcript_file)))
                break
    
    return transcripts

def merge_transcripts_for_file(transcript_files: List[tuple], metadata: Dict) -> str:
    """
    Merge transcript files for a single original file
    
    Args:
        transcript_files: List of (segment_num, filepath) tuples
        metadata: Metadata for the original file
        
    Returns:
        Merged transcript text
    """
    # Sort by segment number
    transcript_files.sort(key=lambda x: x[0])
    
    merged_text = []
    
    for segment_num, filepath in transcript_files:
        try:
            with open(filepath, 'r', encoding='utf-8') as f:
                segment_text = f.read().strip()
                if segment_text:
                    merged_text.append(segment_text)
        except Exception as e:
            print(f"Error reading transcript file {filepath}: {e}")
    
    return " ".join(merged_text)

def process_split_transcripts(input_dir: str, output_dir: str, metadata_dir: str, model_prefixes: List[str]):
    """
    Process and merge split transcripts
    
    Args:
        input_dir: Directory containing split transcript files
        output_dir: Output directory for merged transcripts
        metadata_dir: Directory containing metadata files
        model_prefixes: List of model prefixes to process
    """
    os.makedirs(output_dir, exist_ok=True)
    
    print("Loading metadata...")
    metadata = load_metadata(metadata_dir)
    print(f"Loaded metadata for {len(metadata)} original files")
    
    print("Finding transcript files...")
    transcripts = find_transcript_files(input_dir, model_prefixes)
    print(f"Found transcripts for {len(transcripts)} (model, file) combinations")
    
    # Group by model
    models = defaultdict(list)
    for (model, original_file), transcript_files in transcripts.items():
        models[model].append((original_file, transcript_files))
    
    print(f"Processing {len(models)} models...")
    
    for model in models:
        print(f"\nProcessing model: {model}")
        model_output_dir = os.path.join(output_dir, model)
        os.makedirs(model_output_dir, exist_ok=True)
        
        for original_file, transcript_files in models[model]:
            print(f"  Merging transcripts for: {original_file}")
            
            # Check if we have metadata for this file
            if original_file not in metadata:
                print(f"    Warning: No metadata found for {original_file}, skipping...")
                continue
            
            # Merge transcripts
            merged_text = merge_transcripts_for_file(transcript_files, metadata[original_file])
            
            if merged_text:
                # Save merged transcript
                output_filename = f"{model}_{original_file.replace('.wav', '.txt')}"
                output_path = os.path.join(model_output_dir, output_filename)
                
                with open(output_path, 'w', encoding='utf-8') as f:
                    f.write(merged_text)
                
                print(f"    Saved merged transcript: {output_filename}")
            else:
                print(f"    Warning: No transcript content for {original_file}")

def copy_unsplit_transcripts(input_dir: str, output_dir: str, model_prefixes: List[str]):
    """
    Copy transcript files that were not split (original files)
    
    Args:
        input_dir: Directory containing transcript files
        output_dir: Output directory for copied files
        model_prefixes: List of model prefixes to look for
    """
    print("\nCopying unsplit transcripts...")
    
    for transcript_file in Path(input_dir).glob("*.txt"):
        filename = transcript_file.name
        
        # Check if this is a regular transcript (not from split segments)
        for model_prefix in model_prefixes:
            if filename.startswith(f"{model_prefix}_") and "_segment_" not in filename:
                # This is a regular transcript, copy it
                model_output_dir = os.path.join(output_dir, model_prefix)
                os.makedirs(model_output_dir, exist_ok=True)
                
                output_path = os.path.join(model_output_dir, filename)
                shutil.copy2(transcript_file, output_path)
                print(f"  Copied: {filename}")
                break

def main():
    """Main function"""
    parser = argparse.ArgumentParser(description="Merge split transcripts for WER calculation")
    parser.add_argument("--input_dir", type=str, required=True, help="Directory containing split transcript files")
    parser.add_argument("--output_dir", type=str, required=True, help="Output directory for merged transcripts")
    parser.add_argument("--metadata_dir", type=str, required=True, help="Directory containing metadata files")
    parser.add_argument("--model_prefixes", nargs='+', default=['large-v3', 'wav2vec-xls-r', 'parakeet-tdt-0.6b-v2', 'canary-1b'], help="Model prefixes to process")
    
    args = parser.parse_args()
    
    print("=== Merge Split Transcripts ===")
    print(f"Input directory: {args.input_dir}")
    print(f"Output directory: {args.output_dir}")
    print(f"Metadata directory: {args.metadata_dir}")
    print(f"Model prefixes: {args.model_prefixes}")
    print()
    
    # Process split transcripts
    process_split_transcripts(args.input_dir, args.output_dir, args.metadata_dir, args.model_prefixes)
    
    # Copy unsplit transcripts
    copy_unsplit_transcripts(args.input_dir, args.output_dir, args.model_prefixes)
    
    print("\n=== Merge Complete ===")
    print(f"Merged transcripts saved to: {args.output_dir}")

if __name__ == "__main__":
    main() 