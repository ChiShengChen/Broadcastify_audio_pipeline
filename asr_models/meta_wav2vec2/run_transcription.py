#!/usr/bin/env python3
"""
A simple wrapper script to run transcription on all .wav files in a directory.
"""

import os
import subprocess
import argparse

def run_transcription_on_directory(source_dir, model_name, output_dir=None, hf_token=None):
    """
    Finds all .wav files in the source directory and runs the 
    wav2vec_transcribe.py script on each of them.

    Args:
        source_dir (str): The directory containing .wav files.
        model_name (str): The name of the model to use for transcription.
        output_dir (str, optional): Directory to save transcription files. 
                                    Defaults to the source directory.
        hf_token (str, optional): Hugging Face Hub token.
    """
    print("="*60)
    print("Meta Wav2Vec2 English Audio Transcription Tool")
    print(f"Source Directory: {source_dir}")
    print(f"Output Directory: {output_dir or source_dir}")
    print(f"Model: {model_name}")
    print("="*60)

    source_path = os.path.abspath(source_dir)
    output_path = os.path.abspath(output_dir) if output_dir else source_path

    if not os.path.isdir(source_path):
        print(f"Error: Source directory not found at {source_path}")
        return

    if not os.path.isdir(output_path):
        print(f"Creating output directory at {output_path}")
        os.makedirs(output_path)

    script_path = os.path.join(os.path.dirname(__file__), 'wav2vec_transcribe.py')

    for filename in os.listdir(source_path):
        if filename.lower().endswith('.wav'):
            audio_file_path = os.path.join(source_path, filename)
            print(f"\n--- Processing: {filename} ---")
            
            command = [
                'python', script_path,
                model_name,
                audio_file_path
            ]

            # The output will be automatically generated by the script in its own directory
            # if we don't specify an output file path. Here, we let it do that.

            if hf_token:
                command.extend(['--hf_token', hf_token])
            
            try:
                subprocess.run(command, check=True)
            except subprocess.CalledProcessError as e:
                print(f"Error processing {filename}: {e}")
            except FileNotFoundError:
                print(f"Error: Could not find the transcription script at {script_path}. Make sure it's in the same directory.")
                break

    print("\nTranscription process completed!")
    print(f"Results are saved in the script's execution directory or specified output directory.")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Run batch transcription on a directory of .wav files.")
    parser.add_argument("source_dir", type=str, help="Directory containing the .wav files to transcribe.")
    parser.add_argument("--model", type=str, default="facebook/wav2vec2-large-960h-lv60-self", help="Name of the model to use for transcription.")
    parser.add_argument("--output_dir", type=str, default=None, help="Optional. Directory to save the output transcription files.")
    parser.add_argument("--hf_token", type=str, default=None, help="Optional. Hugging Face Hub token for models that require authentication.")

    args = parser.parse_args()
    
    run_transcription_on_directory(args.source_dir, args.model, args.output_dir, args.hf_token) 